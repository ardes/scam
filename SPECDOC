
FunkyPage class (< Page | has_scam :funk | has_scam :simple, :class_name => 'Scam')
- should have scam_names [:content, :sidebar, :funk, :simple]
- should have one MarukuScam as :funk
- should have one Scam as :simple

FunkyPage :funk association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

FunkyPage :simple association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

MarukuScam
- should set :parsed_content_cache to {} when :content set
- #to_<whatever> should call #parsed_content(:whatever)
- #to_s should call #parsed_content with no args
- #parsed_content(:whatever) should call #parse_to_whatever, if there is no cache
- #parsed_content(:whatever) should return parsed_content_cache[:whatever], and not call #parse_to_whatever, if cache exists
- #parsed_content() should call #parse_to_<default_content_type>, if there is no cache
- #parsed_content() should return parsed_content_cache[default_content_type], and not call #parse_to_<default_content_type>, if cache exists
- should have default_content_type of :html

MarukuScam saved, with no parsed_content
- should return parsed html with #to_html
- should return parsed html with #to_s
- should return parsed string with #to_string

MarukuScam saved, with parsed_content
- should not save record with #to_html

Page class | scam_class_name = 'MarukuScam' | has_scams :content, :sidebar
- should have scam_names [:content, :sidebar]
- should have one MarukuScam as :content
- should have one MarukuScam as :sidebar

Page :content association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

Page :sidebar association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

Product class (has_scam)
- should have scam names: :scam
- should have one Scam as :scam

Product :scam association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

Product.new
- should not attempt to save scams on save

Product with existing scam with cached parsed content
- should be associated with correct scam
- scam.to_s should not save the scam cache

Scam class (migration helpers)
- #drop_table should drop scams table
- #create_table should create scams table and indexes

Scam
- #default_content_type should be :string
- should respond to #to_string
- should not respond to #to_whatever
- should set :parsed_content_cache to {} when :content set
- #to_<whatever> should call #parsed_content(:whatever)
- #to_s should call #parsed_content with no args
- #parsed_content(:whatever) should call #parse_to_whatever, if there is no cache
- #parsed_content(:whatever) should return parsed_content_cache[:whatever], and not call #parse_to_whatever, if cache exists
- #parsed_content() should call #parse_to_<default_content_type>, if there is no cache
- #parsed_content() should return parsed_content_cache[default_content_type], and not call #parse_to_<default_content_type>, if cache exists
- #parsed_content(:whatever) should raise NoMethodError if #parse_to_whatever is not defined
- should return content.to_s with to_s

Scam.new (without scammable)
- #to_content(:whatever) should store result of parse BUT NOT save record

Scam.new (with scammable)
- should set :parsed_content_cache to {} when :content set
- #to_<whatever> should call #parsed_content(:whatever)
- #to_s should call #parsed_content with no args
- #parsed_content(:whatever) should call #parse_to_whatever, if there is no cache
- #parsed_content(:whatever) should return parsed_content_cache[:whatever], and not call #parse_to_whatever, if cache exists
- #parsed_content() should call #parse_to_<default_content_type>, if there is no cache
- #parsed_content() should return parsed_content_cache[default_content_type], and not call #parse_to_<default_content_type>, if cache exists
- #to_content(:whatever) should store the results of parse AND save record

Scam with parsed_content_cache[:whatever]
- should return parsed_content[:whatever]
- should not save record

Scam existing, with parsed content cache
- #parsed_content should not call #parse_to_string

Scammable module
- should have scam_class_name of "Scam"

Finished in 0.257062 seconds

75 examples, 0 failures
