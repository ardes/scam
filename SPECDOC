
FunkyPage class (< Page | has_scam :funk | has_scam :simple, :class_name => 'Scam')
- should have scam_names [:content, :sidebar, :funk, :simple]
- should have one MarukuScam as :funk
- should have one Scam as :simple

FunkyPage :funk association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

FunkyPage :simple association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

MarukuScam
- should set :parsed_content to {} when :content set
- should call #to_content(:whatever) when sent #to_<whatever>
- should raise RuntimeError when sent #to_<whatever>, if parse_to(:whatever) returns nil
- should respond to #to_whatever
- should call #to_content when sent #to_s
- should have default_content_type of :html

MarukuScam saved, with no parsed_content
- should return parsed html with #to_html
- should return parsed html with #to_s
- should update parsed_content and save record with #to_html

MarukuScam saved, with parsed_content
- should not save record with #to_html

Page class | scam_class_name = 'MarukuScam' | has_scams :content, :sidebar
- should have scam_names [:content, :sidebar]
- should have one MarukuScam as :content
- should have one MarukuScam as :sidebar

Page :content association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

Page :sidebar association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

Product class (has_scam)
- should have scam names: :scam
- should have one Scam as :scam

Product :scam association
- should be built on demand
- #scam_name=(of scam type) should replace scam
- #scam_name=(non Scam) should delegate to current scam's :content
- should have name == :scam_name
- should be saved when parent scammable saved

Product.new
- should not attempt to save scams on save

Scam class (migration helpers)
- #drop_table should drop scams table
- #create_table should create scams table and indexes

Scam#to_content(:whatever) (without parsed_content[:whatever])
- should call #parse_to_whatever
- should call parse_to(:whatever) if #parse_whatever is undefined
- should store the results of parse_to(:whetever) in parsed_content[:whatever] and save record

Scam#to_content(:whatever) (with parsed_content[:whatever])
- should return parsed_content[:whatever]
- should not save record

Scam.new
- should set :parsed_content to {} when :content set
- should call #to_content(:whatever) when sent #to_<whatever>
- should raise RuntimeError when sent #to_<whatever>, if parse_to(:whatever) returns nil
- should respond to #to_whatever
- should call #to_content when sent #to_s
- should return {} for #parsed_content
- should return content.to_s with to_s

Scammable module
- should have scam_class_name of "Scam"

Finished in 0.197187 seconds

59 examples, 0 failures
